#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
election(liberal)
election(liberal,conservative,year[1])
require(foreign)
library(foreign)
mp <- read.dta("http://sekhon.berkeley.edu/causalinf/fa2013/data/mps.dta")
#set parameters
elec <- 20 #no elections/year
n <- 40 #no candidates/year
year <- c(1,2,3,4,5) #election years
party <- c("Liberal","Conservative") #candidates
liberal <- seq(1,elec*length(year),by=1) #labor candidate pool
conservative <- seq(elec*length(year)+1,2*(elec*length(year)),by=1) #labor candidate pool
#create result vectors
contest <- matrix(NA, n,10) #election results
drop <- matrix(data = NA, n, ncol = length(year)) #dropped candidates
colnames(drop) <- year
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
l <- l[!l %in% drop]    #update liberals
c <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(l), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(c), replace=FALSE)) #replace drops
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(l), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(c), replace=FALSE)) #replace drops
require(foreign)
library(foreign)
mp <- read.dta("http://sekhon.berkeley.edu/causalinf/fa2013/data/mps.dta")
#set parameters
elec <- 20 #no elections/year
n <- 40 #no candidates/year
year <- c(1,2,3,4,5) #election years
party <- c("Liberal","Conservative") #candidates
liberal <- seq(1,elec*length(year),by=1) #labor candidate pool
conservative <- seq(elec*length(year)+1,2*(elec*length(year)),by=1) #labor candidate pool
#create result vectors
contest <- matrix(NA, n,10) #election results
drop <- matrix(data = NA, n, ncol = length(year)) #dropped candidates
colnames(drop) <- year
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(l), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(c), replace=FALSE)) #replace drops
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
return(list("contest"<-contest))
return(drop)
return(l)
return(c)
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
#set parameters
elec <- 20 #no elections/year
n <- 40 #no candidates/year
year <- c(1,2,3,4,5) #election years
party <- c("Liberal","Conservative") #candidates
liberal <- seq(1,elec*length(year),by=1) #labor candidate pool
conservative <- seq(elec*length(year)+1,2*(elec*length(year)),by=1) #labor candidate pool
#create result vectors
contest <- matrix(NA, n,10) #election results
drop <- matrix(data = NA, n, ncol = length(year)) #dropped candidates
colnames(drop) <- year
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
return(list("contest"<-contest))
return(drop)
return(l)
return(c)
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
traceback()
debug
require(foreign)
library(foreign)
mp <- read.dta("http://sekhon.berkeley.edu/causalinf/fa2013/data/mps.dta")
#set parameters
elec <- 20 #no elections/year
n <- 40 #no candidates/year
year <- c(1,2,3,4,5) #election years
party <- c("Liberal","Conservative") #candidates
liberal <- seq(1,elec*length(year),by=1) #labor candidate pool
conservative <- seq(elec*length(year)+1,2*(elec*length(year)),by=1) #labor candidate pool
#create result vectors
contest <- matrix(NA, n,10) #election results
drop <- matrix(data = NA, n, ncol = length(year)) #dropped candidates
colnames(drop) <- year
require(Rlab)
library(Rlab)
election <- function(year) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
return(list("contest"<-contest))
return(drop)
return(l)
return(c)
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
results <- lapply(year,election)
results <- lapply(year,election,l)
require(foreign)
library(foreign)
mp <- read.dta("http://sekhon.berkeley.edu/causalinf/fa2013/data/mps.dta")
#set parameters
elec <- 20 #no elections/year
n <- 40 #no candidates/year
year <- c(1,2,3,4,5) #election years
party <- c("Liberal","Conservative") #candidates
liberal <- seq(1,elec*length(year),by=1) #labor candidate pool
conservative <- seq(elec*length(year)+1,2*(elec*length(year)),by=1) #labor candidate pool
#create result vectors
contest <- matrix(NA, n,10) #election results
drop <- matrix(data = NA, n, ncol = length(year)) #dropped candidates
colnames(drop) <- year
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
return(list("contest"<-contest))
return(drop)
#return(l)
#return(c)
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
return(list("contest"<-contest))
return(drop)
return(l)
return(c)
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
traceback()
trace()
?trace()
trace(election)
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
return(l)
return(c)
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
return(list("contest"<-contest))
return(drop)
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
l
c
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
drop
return(list("contest"<-contest))
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
drop
l
c
return(list("contest"<-contest))
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
trace(election)
election(1,liberal,conservative)
election(2,liberal,conservative)
untrace(election)
require(Rlab)
library(Rlab)
election <- function(year,liberal,conservative) {
if(year==1) {
l <- sample(liberal,n, replace=FALSE) #pick liberals
c <- sample(conservative,n, replace=FALSE) #pick conservatives
l
c
} else {
liberal <- l[!l %in% drop]    #update liberals
conservative <- c[!c %in% drop]    #update conservatives
l <- append(liberal,sample(l,n-length(liberal), replace=FALSE)) #replace drops
c <- append(conservative,sample(c,n-length(conservative), replace=FALSE)) #replace drops
}
contest[,1:2] <- c(sample(l,n,replace=FALSE),sample(c,n,replace=FALSE)) #select matches
contest[,3]<- runif(n,0,1) #margin of victory
contest[,4] <- round(runif(n,0,1)) #liberal win?
contest[,5] <- ifelse(contest[,4]==1,contest[,1], contest[,2]) #winner ID
contest[,6] <- ifelse(contest[,4]==0,contest[,1], contest[,2]) #loser ID
contest[,7] <- rbern(n,runif(n,0,1)) #does loser rerun?
contest[,8] <- rbern(n,0.95) #does incumbent rerun?
contest[,9] <- contest[,7] + contest[,8] #rerun
contest[,10] <- year #year
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
if(year==1) {
drop <- c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]) #drop out of pool
} else {
drop <- rbind(drop,c(contest[,5][contest[,8]==0],contest[,6][contest[,7]==0]))
}
drop
l
c
return(list("contest"<-contest))
}
#set seed
set.seed(42)
#apply function over each year
results <- lapply(year,election,liberal,conservative)
#store results as df
mp.sim <- data.frame(rbind(matrix(unlist(results[1]),nrow=n, ncol=10),matrix(unlist(results[2]),nrow=n, ncol=10),matrix(unlist(results[3]),nrow=n, ncol=10),matrix(unlist(results[4]),nrow=n, ncol=10),matrix(unlist(results[5]),nrow=n, ncol=10)))
colnames(mp.sim) <- c(party,"margin","lib.win","winner","loser","loser.rerun","winner.rerun","rerun","year")
mb
setwd("~/Dropbox/github/stat243-final")

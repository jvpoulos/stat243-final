{
    "contents" : "#' @include UpperandLower.R\n#' @include evalSampPt.R\n#' @include sampleFromUp.R\nroxygen()\n\n#' @name evalSampPt\n#' \n#' @title Evaluate the enveloping and sandwiching functions\n#' \n#' @description\n#' This function will evaluate the enveloping and sandwiching functions\n#' at the point generated by sampleUp. The returned values are meant\n#' to be used to see whether to reject the sample point or not.\n#'\n#' @param x potential sample point\n#' @param UpHull dataframe for the upper boundary\n#' @param LowHull dataframe for the lower boundary\n#' @return lEval value of the sandwiching function at the sample point\n#' @return uEval value of the enveloping function at the sample point\n\nevalSampPt = function(x, UpHull, LowHull) {\n  \n  \n  # Evaluate lower bound at sample point\n  if (x < min(LowHull$left)) {\n    lEval = -Inf\n  } else if (x > max(LowHull$right)) {\n    lEval = -Inf\n  } else {\n    # Determine which set of information to use\n    ind = which(x >= LowHull$left & x <= LowHull$right, arr.ind = TRUE) \n    lEval = LowHull$m[ind] * x + LowHull$b[ind]\n  }\n  \n  # Evaluate upper bound at sample point\n  indR = which(x >= UpHull$left & x <= UpHull$right, arr.ind = TRUE)\n  uEval = UpHull$m[indR] * x + UpHull$b[indR]\n  \n  return(c(lEval, uEval))\n}",
    "created" : 1386209178183.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2063253426",
    "id" : "350FB85B",
    "lastKnownWriteTime" : 1386213881,
    "path" : "~/Dropbox/github/stat243-final/evalSampPt.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}